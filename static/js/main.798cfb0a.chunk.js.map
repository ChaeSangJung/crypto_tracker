{"version":3,"sources":["api.ts","atom.ts","routes/Chart.tsx","components/WrapContent.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","a","fetch","json","coinId","endDate","Math","floor","Date","now","startDate","isDarkAtom","atom","key","default","Chart","isDark","useRecoilValue","useQuery","fetchCoinHistory","isLoading","data","type","series","name","map","price","x","time_close","y","open","high","low","close","options","theme","mode","chart","height","background","foreColor","animations","enabled","easing","speed","animateGradually","delay","dynamicAnimation","xaxis","yaxis","show","tooltip","formatter","value","toFixed","TextCont","styled","p","props","isPositive","checkValue","num","WrapContent","title","cont","Price","tickerData","tickerLoading","quotes","USD","market_cap_change_24h","percent_change_30m","percent_change_1h","percent_change_12h","percent_change_24h","Tabs","div","Tab","span","isActive","accentColor","textColor","Title","h1","Loader","Container","Header","header","Overview","OverviewItem","Description","Coin","useParams","state","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","fetchCoinTickers","refetchInterval","loading","Helmet","to","rank","symbol","description","total_supply","max_supply","path","Tilte","ListCoin","ul","ItemCoin","li","cardBgColor","Img","img","Coins","setDarkAtom","useSetRecoilState","onClick","prev","slice","coin","pathname","id","src","toLowerCase","Router","basename","process","darkTheme","bgColor","lightTheme","GlobalStyle","createGlobalStyle","App","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.798cfb0a.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\r\n\r\nexport async function fetchCoins() {\r\n    return await (await fetch(`${BASE_URL}/coins`)).json();\r\n}\r\n\r\nexport async function fetchCoinInfo(coinId : string) {\r\n    return await (await fetch(`${BASE_URL}/coins/${coinId}`)).json();\r\n}\r\n\r\nexport async function fetchCoinTickers(coinId : string) {\r\n    return await (await fetch(`${BASE_URL}/tickers/${coinId}`)).json();\r\n}\r\n\r\nexport async function fetchCoinHistory(coinId : string) {\r\n    const endDate = Math.floor(Date.now() / 1000);\r\n    const startDate = endDate - 60 * 60 * 24 * 7 * 2;\r\n    return await(await fetch(`${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`)).json();\r\n}","import  { atom } from \"recoil\"\r\n\r\nexport const isDarkAtom = atom({\r\n    key:\"isDark\",\r\n    default: true,\r\n});","import { useQuery } from \"react-query\";\r\nimport { fetchCoinHistory } from \"../api\";\r\nimport ApexChart from \"react-apexcharts\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { isDarkAtom } from \"../atom\";\r\n\r\ninterface ChartProps {\r\n    coinId:string;\r\n}\r\ninterface IHistorical {\r\n    close: number;\r\n    high: number;\r\n    low: number;\r\n    market_cap: number;\r\n    open: number;\r\n    time_close: string;\r\n    time_open: string;\r\n    volume: number\r\n}\r\n\r\nconst Chart = ({coinId}:ChartProps) => {\r\n    const isDark = useRecoilValue(isDarkAtom);\r\n    const { isLoading, data } = useQuery<IHistorical[]>([\"ohlcv\", coinId], ()=> fetchCoinHistory(coinId));\r\n    \r\n    return (\r\n        <div>\r\n            {isLoading ? (\"Loading chart\")\r\n             : (<ApexChart\r\n                type=\"candlestick\"\r\n                series={[\r\n                  {\r\n                    name: \"Price\",\r\n                    data: data?.map((price) => ({\r\n                      x: price.time_close,\r\n                      y: [price.open, price.high, price.low, price.close],\r\n                    })),\r\n                  },\r\n                ]}\r\n                options={{\r\n                  theme: {\r\n                    mode: isDark ? \"dark\" : \"light\",\r\n                  },\r\n                  chart: {\r\n                    type: \"candlestick\",\r\n                    height: 900,\r\n                    background: \"transparent\",\r\n                    foreColor: \"white\",\r\n                    animations: {\r\n                      enabled: true,\r\n                      easing: \"easeinout\",\r\n                      speed: 800,\r\n                      animateGradually: {\r\n                        enabled: true,\r\n                        delay: 150,\r\n                      },\r\n                      dynamicAnimation: {\r\n                        enabled: true,\r\n                        speed: 350,\r\n                      },\r\n                    },\r\n                  },\r\n                  xaxis: {\r\n                    type: \"datetime\",\r\n                  },\r\n                  yaxis: {\r\n                    show: false,\r\n                  },\r\n                  tooltip: {\r\n                    enabled: true,\r\n                    y: {\r\n                        formatter: (value) => `$${value.toFixed(2)}`,\r\n                      },\r\n                  },\r\n                  \r\n                }}\r\n              />\r\n              )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import styled from \"styled-components\";\r\n\r\ninterface ContProp {\r\n    title: string;\r\n    type: string;\r\n    cont:number | undefined;\r\n}\r\n\r\nconst TextCont = styled.p<{isPositive?:boolean}>`\r\n    color: ${(props) => (props.isPositive ? \"red\" : \"blue\")};\r\n`;\r\n\r\nconst checkValue = (num : number | undefined) => {\r\n    if(num){\r\n        if(num > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nconst WrapContent = ({title, cont, type} : ContProp) => {\r\n    return (\r\n        <div>\r\n            <strong>{title}</strong>\r\n            <TextCont isPositive={checkValue(cont)}>\r\n                <span>{type === \"$\"? \"$\" : null}</span>\r\n                <span>{cont?.toFixed(2)}</span>\r\n                <span>{type === \"%\"? \"%\" : null}</span>\r\n            </TextCont>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WrapContent;","import WrapContent from \"../components/WrapContent\";\r\n\r\ninterface PriceData {\r\n    id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  beta_value: number;\r\n  first_data_at: string;\r\n  last_updated: string;\r\n  quotes: {\r\n    USD: {\r\n      ath_date: string;\r\n      ath_price: number;\r\n      market_cap: number;\r\n      market_cap_change_24h: number;\r\n      percent_change_1h: number;\r\n      percent_change_1y: number;\r\n      percent_change_6h: number;\r\n      percent_change_7d: number;\r\n      percent_change_12h: number;\r\n      percent_change_15m: number;\r\n      percent_change_24h: number;\r\n      percent_change_30d: number;\r\n      percent_change_30m: number;\r\n      percent_from_price_ath: number;\r\n      price: number;\r\n      volume_24h: number;\r\n      volume_24h_change_24h: number;\r\n    };\r\n  };\r\n}\r\n\r\ninterface PriceProps {\r\n    coinId :string;\r\n    tickerData? : PriceData;\r\n    tickerLoading : boolean;\r\n}\r\n\r\nconst Price = ({coinId, tickerData, tickerLoading}:PriceProps) => {\r\n    \r\n    return (\r\n        <div>\r\n            {tickerLoading ? \"Loading...\" : (<>\r\n                <WrapContent \r\n                    title={\"Price\"}\r\n                    type={\"$\"}\r\n                    cont={tickerData?.quotes.USD.price}\r\n                />\r\n                <WrapContent \r\n                    title={\"Max Change rate in last 24h\"}\r\n                    type={\"%\"}\r\n                    cont={tickerData?.quotes.USD.market_cap_change_24h}\r\n                />\r\n                <WrapContent \r\n                    title={\"Change rate (last 30 Minutes)\"}\r\n                    type={\"%\"}\r\n                    cont={tickerData?.quotes.USD.percent_change_30m}\r\n                />\r\n                <WrapContent \r\n                    title={\"Change rate (last 1 hours)\"}\r\n                    type={\"%\"}\r\n                    cont={tickerData?.quotes.USD.percent_change_1h}\r\n                />\r\n                <WrapContent \r\n                    title={\"Change rate (last 12 hours)\"}\r\n                    type={\"%\"}\r\n                    cont={tickerData?.quotes.USD.percent_change_12h}\r\n                />\r\n                <WrapContent \r\n                    title={\"Change rate (last 24 hours)\"}\r\n                    type={\"%\"}\r\n                    cont={tickerData?.quotes.USD.percent_change_24h}\r\n                />\r\n            </>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Price;","// import { useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { Helmet } from \"react-helmet\";\nimport { Switch, Route, useLocation, useParams, useRouteMatch } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\nimport Chart from \"./Chart\";\nimport Price from \"./Price\";\n\nconst Tabs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 25px 0px;\n  gap: 10px;\n`;\n\nconst Tab = styled.span<{isActive : boolean}>`\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 400;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 7px 0px;\n  border-radius: 10px;\n  color: ${(props) => props.isActive ? props.theme.accentColor : props.theme.textColor};\n  a {\n    display: block;\n  }\n`;\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.header`\n  height: 15vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 10px 20px;\n  border-radius: 10px;\n`;\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;    \n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\nconst Description = styled.p`\n  margin: 20px 0px;\n`;\n\n\n\ninterface RouteParams {\n  coinId: string;\n}\ninterface RouterState {\n  name: string;\n}\ninterface InfoData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n  description: string;\n  message: string;\n  open_source: boolean;\n  started_at: string;\n  development_status: string;\n  hardware_wallet: boolean;\n  proof_type: string;\n  org_structure: string;\n  hash_algorithm: string;\n  first_data_at: string;\n  last_data_at: string;\n}\n\ninterface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\nconst Coin = () => {\n  // const [loading, setLoading] = useState(true);\n  // // const { coinId } = useParams<{coinId:string}>();\n  const { coinId } = useParams<RouteParams>();\n  // // const { state : { name } } = useLocation<{name:string}>();\n  const {state} = useLocation<RouterState>();  \n  // const [info, setInfo] = useState<InfoData>();\n  // const [priceInfo, setPriceInfo] = useState<PriceData>();\n  const priceMatch = useRouteMatch(\"/:coinId/price\");\n  const chartMatch = useRouteMatch(\"/:coinId/chart\");\n  \n  // useEffect(()=>{\n  //   (async () => {\n  //     const infoData = await (\n  //       await fetch(`https://api.coinpaprika.com/v1/coins/${coinId}`)\n  //     ).json();\n  //     const priceData = await (\n  //       await fetch(`https://api.coinpaprika.com/v1/tickers/${coinId}`)\n  //     ).json();\n\n  //     setInfo(infoData);\n  //     setPriceInfo(priceData);\n  //     setLoading(false);\n  //   })();\n  // }, [coinId]);\n\n  const {isLoading:infoLoading, data:infoData} = useQuery<InfoData>([\"info\", coinId], ()=>fetchCoinInfo(coinId));\n  const {isLoading: tickerLoading, data:tickerData} = useQuery<PriceData>(\n    [\"price\", coinId],\n    ()=>fetchCoinTickers(coinId),\n    {\n      refetchInterval:5000,\n    }\n  );\n  \n  const loading = tickerLoading || infoLoading;\n  return (\n    <Container>\n      <Helmet>\n        <title>\n          {state?.name? state.name : loading ? \"Loading...\" : infoData?.name}\n        </title>\n      </Helmet>\n      <Header>\n        {/* <Title>{state?.name || \"Loading...\"}</Title> */}\n        <Title>\n          {state?.name? state.name : loading ? \"Loading...\" : infoData?.name}\n        </Title>\n      </Header>\n      <div>\n            <Link to=\"/\">&larr;</Link>\n          </div>\n      {loading ? <Loader>Loading...</Loader> : (\n        <>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n            <OverviewItem>\n                <span>Symbol:</span>\n                <span>${infoData?.symbol}</span>\n              </OverviewItem>\n              <OverviewItem>\n                <span>Price:</span>\n                <span>${tickerData?.quotes.USD.price.toFixed(10)}</span>\n              </OverviewItem>\n          </Overview>\n          <Description>{infoData?.description}</Description>\n          <Overview>\n            <OverviewItem>\n              <span>Total Suply:</span>\n              <span>{tickerData?.total_supply}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Max Supply:</span>\n              <span>{tickerData?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n          <Tabs>\n            <Tab isActive={chartMatch !== null}>\n              <Link to={`/${coinId}/chart`}>Chart</Link>\n            </Tab>\n            <Tab isActive={priceMatch !== null}>\n              <Link to={`/${coinId}/price`}>Price</Link>\n            </Tab>\n          </Tabs>\n          <Switch>\n            <Route path={`/:coinId/price`}>\n              <Price \n                coinId={coinId}\n                tickerData = {tickerData}\n                tickerLoading = {tickerLoading}\n              />\n            </Route>\n            <Route path={`/:coinId/chart`}>\n              <Chart coinId={coinId}/>\n            </Route>\n          </Switch>\n        </>\n      )}\n    </Container>\n  );  \n}\n\nexport default Coin;\n","// import { useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoins } from \"../api\";\nimport { Helmet } from \"react-helmet\";\nimport { useSetRecoilState } from \"recoil\";\nimport { isDarkAtom } from \"../atom\";\n\nconst Tilte = styled.h1`\n  color: ${(props) => props.theme.accentColor};\n`;\nconst Container = styled.div`\n  padding: 0px 20px;\n`;\nconst Header = styled.header`\n  display: flex;  \n  justify-content: center;\n  align-items: center;\n  height: 15vh;\n`;\nconst ListCoin = styled.ul``;\nconst ItemCoin = styled.li`\n  margin-bottom: 10px;\n  background-color: ${(props) => props.theme.cardBgColor};\n  color: ${(props)=>(props.theme.textColor)};\n  border-radius: 15px;\n  border: 1px solid white;\n  a {\n    display: flex;\n    align-items: center;\n    padding: 20px;\n    transition: color 0.2s ease-in;\n  }\n  &:hover {\n    a {\n      color: ${(props)=>props.theme.accentColor};\n    }\n  }\n`;\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\nconst Img = styled.img`\n  width: 35px;\n  height: 35px;\n  margin-right: 10px;\n`;\n\ninterface ICoin {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n}\n\nconst Coins = () => {\n  // const [coins, setCoins] = useState<ICoin[]>([]);\n  // const [loading, setLoading] = useState(true);\n  // useEffect(()=>{\n  //   (async ()=>{\n  //     const response = await fetch(\"https://api.coinpaprika.com/v1/coins\");\n  //     const json = await response.json();\n  //     setCoins(json.slice(0,100));\n  //     setLoading(false);\n  //   })();\n  // }, []);\n  const setDarkAtom = useSetRecoilState(isDarkAtom);\n  const toggleDarkAtom = () => setDarkAtom((prev)=>!prev);\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\n\n  return (\n    <>\n      <Container>\n        <Helmet>\n          <title>Coins</title>\n        </Helmet>\n        <Header>\n          <Tilte>Coins</Tilte>\n          <button onClick={toggleDarkAtom}>Toggle Mode</button>\n        </Header>\n        {isLoading ? (\n          <Loader>Loading...</Loader>\n        ) : (\n          <ListCoin>\n            {data?.slice(0, 100).map((coin) => (\n            <ItemCoin key={coin.id}>\n              <Link\n                to={{\n                  pathname: `/${coin.id}`,\n                  state: { name: coin.name },\n                }}\n              >\n                <Img\n                  src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\n                />\n                {coin.name} &rarr;\n              </Link>\n            </ItemCoin>\n          ))}\n          </ListCoin>\n        )}        \n      </Container>\n    </>\n  );\n}\n\nexport default Coins;","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Coin from \"./routes/Coin\";\nimport Coins from \"./routes/Coins\";\n\nconst Router = () => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/:coinId\">\n          <Coin />\n        </Route>\n        <Route path=\"/\">\n          <Coins/>\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\nexport default Router;\n","import { DefaultTheme } from \"styled-components\";\n\nexport const theme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"#f5f6fa\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",  \n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"whitesmoke\",\n  textColor: \"black\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"white\",\n};","import { createGlobalStyle,ThemeProvider } from \"styled-components\";\nimport Router from \"./Router\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"./atom\";\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, menu, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed,\n  figure, figcaption, footer, header, hgroup,\n  main, menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure,\n  footer, header, hgroup, main, menu, nav, section {\n    display: block;\n  }\n  /* HTML5 hidden-attribute fix for newer browsers */\n  *[hidden] {\n    display: none;\n  }\n  body {\n    font-weight: 300;\n    font-family: 'Source Sans Pro', sans-serif;\n    color:${(props) => props.theme.textColor};\n    background-color:${(props) => props.theme.bgColor};\n    line-height: 1.2;\n  }\n  menu, ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: 'Source Sans Pro', sans-serif;\n    background-color:${(props) => props.theme.bgColor};\n    color:${(props) => props.theme.textColor}\n  }\n  a {\n    text-decoration:none;\n    color:inherit;\n  }\n`;\n\nconst App = () => {\n  const isDark = useRecoilValue(isDarkAtom);\n\n  return (\n    <>\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <GlobalStyle />\n        <Router />\n        <ReactQueryDevtools initialIsOpen={true} />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n          <App />\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}